<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Dennis_Chen</title>
	<atom:link href="./index.html" rel="self" type="application/rss+xml" />
	<link>./../../index.html</link>
	<description>杂技程序员</description>
	<lastBuildDate>Sun, 17 Nov 2019 09:52:59 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2.4</generator>
	<item>
		<title>NLP之WordEmbedding</title>
		<link>./../2019/11/01/wordemmbedding/index.html</link>
				<comments>./../2019/11/01/wordemmbedding/index.html#respond</comments>
				<pubDate>Fri, 01 Nov 2019 08:14:22 +0000</pubDate>
		<dc:creator><![CDATA[dennis]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">./../../index.html?p=111</guid>
				<description><![CDATA[简单来说，Word Embedding 是将自然语言表示的单词转换为计算机能够理解的向量或矩阵形式的技术。是将词嵌入到一个由神经网络的隐藏层权重构成的空间中，让语义相近的词在这个空间中距离也是相近的。由于要考虑多种因素比如词的语义（同义词近义词）、语料中词之间的关系（上下文）和向量的维度（处理复杂度）等等，我们希望近义词或者表示同类事物的单词之间的距离可以理想地近，只有拿到很理想的单词表示形式，才更容易地去做翻译、问答、信息抽取等进一步的工作。 如上图所示，在性别的维度上，king的投影和man的投影距离是十分相近的。 One-hot coding 处理文本数据中单词的一般方法是对文本进行one-hot coding。 one-hot是最简单的一种处理方式。通俗地去讲，把语料中的词汇去重取出，按照一定的顺序（字典序、出现顺序等）排列为词汇表，则每一个单词都可以表示为一个长度为N的向量，N为词汇表长度，即单词总数。该向量中，除了该词所在的分量为1，其余均置为0。 例如，有语料库如下： John likes to watch movies. Mary likes movies too. John also likes to watch football games. 假设我们的词汇表排序结果如下： {&#8220;John&#8221;: 1, &#8220;likes&#8221;: 2, &#8220;to&#8221;: 3, &#8220;watch&#8221;: 4, &#8220;movies&#8221;: 5, &#8220;also&#8221;:6, &#8220;football&#8221;: 7, &#8220;games&#8221;: 8, &#8220;Mary&#8221;: 9, &#8220;too&#8221;: 10} 那么则有如下word的向量表示： John: [1, 0, 0, 0, 0, 0, 0, &#8230; <p class="link-more"><a href="./../2019/11/01/wordemmbedding/index.html" class="more-link">Continue reading<span class="screen-reader-text"> "NLP之WordEmbedding"</span></a></p>]]></description>
								<content:encoded><![CDATA[
<p>简单来说，Word Embedding 是将自然语言表示的单词转换为计算机能够理解的向量或矩阵形式的技术。是将词嵌入到一个由神经网络的隐藏层权重构成的空间中，让语义相近的词在这个空间中距离也是相近的。由于要考虑多种因素比如词的语义（同义词近义词）、语料中词之间的关系（上下文）和向量的维度（处理复杂度）等等，我们希望近义词或者表示同类事物的单词之间的距离可以理想地近，只有拿到很理想的单词表示形式，才更容易地去做翻译、问答、信息抽取等进一步的工作。</p>



<figure class="wp-block-image"><img src="./../../wp-content/uploads/2019/11/word1-1024x388.png" alt="" class="wp-image-115" srcset="./../../wp-content/uploads/2019/11/word1-1024x388.png 1024w, ./../../wp-content/uploads/2019/11/word1-300x114.png 300w, ./../../wp-content/uploads/2019/11/word1-768x291.png 768w, ./../../wp-content/uploads/2019/11/word1.png 1064w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /></figure>



<p>如上图所示，在性别的维度上，king的投影和man的投影距离是十分相近的。</p>



<h2>One-hot coding</h2>



<p>处理文本数据中单词的一般方法是对文本进行one-hot coding。</p>



<p>one-hot是最简单的一种处理方式。通俗地去讲，把语料中的词汇去重取出，按照一定的顺序（字典序、出现顺序等）排列为词汇表，则每一个单词都可以表示为一个长度为N的向量，N为词汇表长度，即单词总数。该向量中，除了该词所在的分量为1，其余均置为0。    例如，有语料库如下：</p>



<p>John likes to watch movies. Mary likes movies too.</p>



<p>John also likes to watch football games.</p>



<p>假设我们的词汇表排序结果如下：</p>



<p>{&#8220;John&#8221;: 1, &#8220;likes&#8221;: 2, &#8220;to&#8221;: 3, &#8220;watch&#8221;: 4, &#8220;movies&#8221;: 5, &#8220;also&#8221;:6, &#8220;football&#8221;: 7, &#8220;games&#8221;: 8, &#8220;Mary&#8221;: 9, &#8220;too&#8221;: 10}</p>



<p>那么则有如下word的向量表示：</p>



<p>John: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]</p>



<p>likes: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0] &#8230;</p>



<p>在现实中，文字词汇中将有成千上万的独特单词。对于这些单词，使用这样的one-hotc coding矢量（vector）进行计算将非常低效，因为one-hot 矢量中的大多数值将为0。因此，将发生在one-hot 矢量和第一个隐藏层之间的矩阵计算,在输出中，大部分将是0值。</p>



<p>我们使用embedding来解决此问题并大大提高我们的网络效率。embedding 就像一个完全连接的层。我们将这一层称为“嵌入层”，将权重称为“嵌入权重”。<br> 现在，我们不用在输入和隐藏层之间进行矩阵乘法，而是直接从嵌入权重矩阵中获取值。我们之所以这样做是因为将one-hot点向量与权重矩阵相乘会返回对应于输入单位“ 1”的索引的矩阵行。</p>



<figure class="wp-block-image"><img src="./../../wp-content/uploads/2019/11/word3.png" alt="" class="wp-image-116" srcset="./../../wp-content/uploads/2019/11/word3.png 877w, ./../../wp-content/uploads/2019/11/word3-300x128.png 300w, ./../../wp-content/uploads/2019/11/word3-768x328.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /></figure>



<p>因此，我们将此权重矩阵用作查找表。我们将单词编码为整数，例如，“ cool”编码为512，“ hot”编码为764。然后，要获取“ cool”的隐藏层输出值，我们只需要在权重矩阵中查找第512行即可。此过程称为嵌入查找。隐藏层输出中的维数为嵌入维。</p>



<figure class="wp-block-image"><img src="./../../wp-content/uploads/2019/11/word4.png" alt="" class="wp-image-117" srcset="./../../wp-content/uploads/2019/11/word4.png 812w, ./../../wp-content/uploads/2019/11/word4-300x251.png 300w, ./../../wp-content/uploads/2019/11/word4-768x642.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /></figure>
]]></content:encoded>
							<wfw:commentRss>./../2019/11/01/wordemmbedding/feed/index.html</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>使用Dijkstra算法，MPI并行编程解决全源最短路径问题（All-Pairs Shortest Paths Problem)</title>
		<link>./../2019/10/24/mpi/index.html</link>
				<comments>./../2019/10/24/mpi/index.html#respond</comments>
				<pubDate>Thu, 24 Oct 2019 07:57:20 +0000</pubDate>
		<dc:creator><![CDATA[dennis]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">./../../index.html?p=72</guid>
				<description><![CDATA[该项目的目标是设计并行算法，并使用Dijkstra算法来解决全源最短路径问题（All-Pairs Shortest Paths Problem) 。 Dijkstra算法mpi 全源最短路径问题： 确定给定图中每对顶点之间的最短图形距离。在全源最短路径问题中，每个顶点到所有顶点的最短距离可以分别计算。因此，MPI框架可用于并行计算最短距离，每个进程负责一部分顶点计算。根据顶点数量和平行比例平均分配所有顶点。在每个进程中，根据当前进程号和进程总数确定每个进程的计算范围。 首先，程序在根进程中读取图形的输入数据，并通过MPI_Bcast函数将图形的顶点数和权重矩阵分配给每个进程。为了方便处理，将图的数据读入并存储在一维数组中。接下来，在每个过程中，使用djkstra算法计算从每个顶点到范围内所有顶点的最短距离。计算完成后，通过MPI_Gatherv函数将每个进程的计算结果收集到根进程中，最后将结果保存到根进程中的文件中。 部分代码 djkstra algorithm 的实现 连续迭代，每次找到距离最短的顶点，更新从该顶点到其他顶点的距离，直到找到到所有顶点到起点的最短距离。这是使用Dijkstra 单源最短路径算法，将此函数broadcast到MPI的其他节点，并分配给其相应的图中的顶点并完成此算法，就可以解决全源最短路径问题。 输入文件 输入文件格式本质上是有向加权图的扁平邻接矩阵。所有权重均为正整数。这些是二进制文件，因此需要将其读取。每个文件包含： 顶点数 (numV) numV x numV 个整数，指定所有连接的权重例如： 对应如下矩阵： 使用 ./run.sh host 文件定义了MPI 所需要的节点数量，最优使用数量在16个左右 输出 ./print_bin_result test_data/xxx.out 项目地址：https://github.com/Dennis174698/dijkstra_mpi]]></description>
								<content:encoded><![CDATA[
<p>该项目的目标是设计并行算法，并使用Dijkstra算法来解决全源最短路径问题（All-Pairs Shortest Paths Problem) 。</p>



<p><a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95">Dijkstra算法</a><br><a href="https://en.wikipedia.org/wiki/Message_Passing_Interface">mpi</a>  </p>



<p>全源最短路径问题： 确定给定图中每对顶点之间的最短图形距离。<br>在全源最短路径问题中，每个顶点到所有顶点的最短距离可以分别计算。因此，MPI框架可用于并行计算最短距离，每个进程负责一部分顶点计算。根据顶点数量和平行比例平均分配所有顶点。在每个进程中，根据当前进程号和进程总数确定每个进程的计算范围。</p>



<p>首先，程序在根进程中读取图形的输入数据，并通过MPI_Bcast函数将图形的顶点数和权重矩阵分配给每个进程。为了方便处理，将图的数据读入并存储在一维数组中。接下来，在每个过程中，使用djkstra算法计算从每个顶点到范围内所有顶点的最短距离。计算完成后，通过MPI_Gatherv函数将每个进程的计算结果收集到根进程中，最后将结果保存到根进程中的文件中。</p>



<h2>部分代码</h2>



<p>djkstra algorithm 的实现</p>



<pre class="wp-block-code"><code>/**
 * Using djkstra algorithm to calculate the shortest distance between vertices
 *
 * @param graph Graph struct
 * @param start start number of the vertex that calculates the shortest distance
 * @param end end number of the vertex that calculates the shortest distance
 * @return
 */
int *djstra(Graph *graph, int start, int end) {
    int n = graph->vertices_number;
    int *local_result = (int *) malloc(sizeof(int) * (end - start + 1) * n);
    memcpy(local_result, graph->adjacency_matrix + start * n, (end - start + 1) * n * sizeof(int));
    int *mark = (int *) malloc(sizeof(int) * n);
    int vertex_no = start;
    for (; vertex_no &lt;= end; vertex_no++) {
        memset(mark, 0, sizeof(int) * n);
        int i = 0;
        while (i++ &lt; n) {
            int offset = (vertex_no - start) * n;
            int vertex = get_min(local_result + offset, mark, n);
            mark[vertex] = 1;
            int j = 0;
            for (; j &lt; n; j++) {
                if (mark[j] == 1) {
                    continue;
                }
                // updating distance
                if (local_result[offset + vertex] + graph->adjacency_matrix[vertex * n + j] &lt;local_result[offset + j]) {
                    local_result[offset + j] = local_result[offset + vertex] + graph->adjacency_matrix[vertex * n + j];
                }
            }
        }
    }
    return local_result;
}</code></pre>



<div class="wp-block-image"><figure class="aligncenter"><img src="./../../wp-content/uploads/2019/11/Dijkstra_Animation.gif" alt="" class="wp-image-85"/></figure></div>



<p>连续迭代，每次找到距离最短的顶点，更新从该顶点到其他顶点的距离，直到找到到所有顶点到起点的最短距离。这是使用Dijkstra 单源最短路径算法，将此函数broadcast到MPI的其他节点，并分配给其相应的图中的顶点并完成此算法，就可以解决全源最短路径问题。</p>



<h2>输入文件</h2>



<p>输入文件格式本质上是有向加权图的扁平邻接矩阵。所有权重均为正整数。这些是二进制文件，因此需要将其读取。每个文件包含：</p>



<ul><li>顶点数 (numV)</li><li>numV x numV 个整数，指定所有连接的权重<br>例如：<br></li></ul>



<div class="wp-block-image"><figure class="aligncenter"><img src="./../../wp-content/uploads/2019/11/graph.png" alt="" class="wp-image-79" srcset="./../../wp-content/uploads/2019/11/graph.png 372w, ./../../wp-content/uploads/2019/11/graph-300x217.png 300w" sizes="(max-width: 372px) 100vw, 372px" /></figure></div>



<p>对应如下矩阵：</p>



<div class="wp-block-image"><figure class="aligncenter"><img src="./../../wp-content/uploads/2019/11/matirx.png" alt="" class="wp-image-80"/><figcaption>4 0 15 1 1 0 0 3 0 1 3 0 0 0 1 1 0 </figcaption></figure></div>



<h2>使用</h2>



<p><code>./run.sh</code>  host 文件定义了MPI 所需要的节点数量，最优使用数量在16个左右</p>



<h2>输出</h2>



<p><code>./print_bin_result test_data/xxx.out</code></p>



<p>项目地址：<a href="https://github.com/Dennis174698/dijkstra_mpi">https://github.com/Dennis174698/dijkstra_mpi</a><br></p>
]]></content:encoded>
							<wfw:commentRss>./../2019/10/24/mpi/feed/index.html</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>使用Ardunio nano 开发自动小船</title>
		<link>./../2019/10/13/arduino/index.html</link>
				<comments>./../2019/10/13/arduino/index.html#respond</comments>
				<pubDate>Sun, 13 Oct 2019 12:48:40 +0000</pubDate>
		<dc:creator><![CDATA[dennis]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">./../../index.html?p=90</guid>
				<description><![CDATA[功能 通过指南针模块反馈保持直行 碰到障碍物时掉头 掉头后保持直行 返回到起始点 器件清单 Arduino Nano x 1; Boat cover x 1; Battery case x 1; 1.5v Battery x 4; Breadboard x 1; LSM303 3 Axis Digital Compass sensor; Z6322 Ultrasonic Distance Sensor; Eletric motor x2 ; 硬件设置 程序逻辑 指南针模块的读取： 要将microTesla读数转换为0-360度指南针航向，需要使用atan2（）函数计算由Y和X轴读数定义的矢量的角度。结果将以弧度为单位，因此我们乘以180度，然后除以Pi以将其转换为度。同时加上360度将范围定在0到360度之间。 超声波距离传感器模块的读取： 给Trig发送一个低高低的短时间脉冲,触发测距,存储回波等待时间,pulseIn函数会等待引脚变为HIGH,开始计算时间,再等待变为LOW并停止计时,等待返回脉冲的长度。 声速是:340m/1s 换算成 34000cm / 1000000μs =&#62; 34 / 1000因为发送到接收,实际是相同距离走了2回,所以要除以2 距离(厘米) &#8230; <p class="link-more"><a href="./../2019/10/13/arduino/index.html" class="more-link">Continue reading<span class="screen-reader-text"> "使用Ardunio nano 开发自动小船"</span></a></p>]]></description>
								<content:encoded><![CDATA[
<h2>功能</h2>



<ul><li>通过指南针模块反馈保持直行</li><li>碰到障碍物时掉头</li><li>掉头后保持直行</li><li>返回到起始点</li></ul>



<h3>器件清单</h3>



<ul><li>Arduino Nano x 1; </li><li>Boat cover x 1; </li><li>Battery case x 1; </li><li>1.5v Battery x 4; </li><li>Breadboard x 1; </li><li>LSM303 3 Axis Digital Compass sensor; </li><li>Z6322 Ultrasonic Distance Sensor;</li><li>Eletric motor x2 ; </li></ul>



<h3>硬件设置</h3>



<figure class="wp-block-image"><img src="./../../wp-content/uploads/2019/11/hardware.png" alt="" class="wp-image-96" srcset="./../../wp-content/uploads/2019/11/hardware.png 695w, ./../../wp-content/uploads/2019/11/hardware-300x205.png 300w" sizes="(max-width: 695px) 100vw, 695px" /></figure>



<h3>程序逻辑</h3>



<figure class="wp-block-image"><img src="./../../wp-content/uploads/2019/11/workflow.png" alt="" class="wp-image-97" srcset="./../../wp-content/uploads/2019/11/workflow.png 954w, ./../../wp-content/uploads/2019/11/workflow-300x206.png 300w, ./../../wp-content/uploads/2019/11/workflow-768x526.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /></figure>



<h4>指南针模块的读取：</h4>



<p>要将microTesla读数转换为0-360度指南针航向，需要使用atan2（）函数计算由Y和X轴读数定义的矢量的角度。结果将以弧度为单位，因此我们乘以180度，然后除以Pi以将其转换为度。同时加上360度将范围定在0到360度之间。</p>



<pre class="wp-block-code"><code>float compassRead(float heading){
  /* Get a new sensor event */ 
  sensors_event_t   event; 
  mag.getEvent(&amp;event);
  
  float Pi = 3.14159;
  
  // Calculate the angle of the vector y,x
  heading = (atan2(event.magnetic.y,event.magnetic.x) * 180) / Pi;// 计算arctan（x，y）
  
  // Normalize to 0-360
  if (heading &lt; 0)
  {
    heading = 360 + heading;
  }
  return heading;
}
</code></pre>



<h4>超声波距离传感器模块的读取：</h4>



<p>给Trig发送一个低高低的短时间脉冲,触发测距,存储回波等待时间,pulseIn函数会等待引脚变为HIGH,开始计算时间,再等待变为LOW并停止计时,等待返回脉冲的长度。</p>



<p>声速是:340m/1s 换算成 34000cm / 1000000μs =&gt; 34 / 1000<br>因为发送到接收,实际是相同距离走了2回,所以要除以2<br> 距离(厘米)  =  (回波时间 * (34 / 1000)) / 2<br> 简化后的计算公式为 (回波时间 * 17)/ 1000 cm</p>



<pre class="wp-block-code"><code>void distance(){
  digitalWrite(Trig, LOW); 
  delayMicroseconds(2);    
  digitalWrite(Trig,HIGH); 
  delayMicroseconds(10);    
  digitalWrite(Trig, LOW); 
  
  temp = float(pulseIn(Echo, HIGH)); 
  //calculte the time between HIGH to LOW
  
  
  //34000cm / 1000000μs => 34 / 1000
  //
  //distance(cm)  =  (temp * (34 / 1000)) / 2
  // (temp * 17)/ 1000
  
  cm = (temp * 17 )/1000; //transfer to cm
}</code></pre>



<h4>servo转向角度:</h4>



<p>转向角度=初始角度-实时角度<br>
特殊情况1：<br>
船身角度330°转到30°，转向角度=实时角度-初始角度：30°-330°+360° = 60°<br>
Servo偏向等于90°+60°=150°<br>
特殊情况2：<br>
船身角度30°转到330°，转向角度=初始角度-实时角度：30°-330°+360° = 60°<br>
Servo偏向等于90°-60° = 30°</p>



<figure class="wp-block-image"><img src="./../../wp-content/uploads/2019/11/angle.png" alt="" class="wp-image-99" srcset="./../../wp-content/uploads/2019/11/angle.png 910w, ./../../wp-content/uploads/2019/11/angle-300x114.png 300w, ./../../wp-content/uploads/2019/11/angle-768x291.png 768w" sizes="(max-width: 767px) 89vw, (max-width: 1000px) 54vw, (max-width: 1071px) 543px, 580px" /></figure>



<pre class="wp-block-code"><code>    turnAngle = int(init_angle)-int(angle);
    if(turnAngle>180){
      turnAngle = int(angle)-int(init_angle)+360;
      servoValue = 90+turnAngle;
    }
    else if(turnAngle&lt;=-180){
       turnAngle+=360;
       servoValue = 90-turnAngle;
    }
    else if(turnAngle>-180&amp;&amp;turnAngle&lt;180)
    {
      servoValue = 90-turnAngle;
    }</code></pre>



<p>servo 会控制船舵偏向，从而达到控制船身前进方向的效果。</p>



<p>项目地址： <a href="https://github.com/Dennis174698/auto_boat">https://github.com/Dennis174698/auto_boat</a></p>
]]></content:encoded>
							<wfw:commentRss>./../2019/10/13/arduino/feed/index.html</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>slitherlink puzzle game</title>
		<link>./../2019/05/15/slitherlink-puzzle-game/index.html</link>
				<comments>./../2019/05/15/slitherlink-puzzle-game/index.html#respond</comments>
				<pubDate>Wed, 15 May 2019 12:35:34 +0000</pubDate>
		<dc:creator><![CDATA[dennis]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">./../../index.html?p=107</guid>
				<description><![CDATA[slitherlink slitherlink game: 数回：游戏由0,1,2,3四个数字组成。每一个数字，代表四周划线的数目，并在最后成为一个不间断 、不分岔的回路。 把点与点以直线和横线相连，使之成为一个回路，且只能有一个回路。四点之间的数字代表在其四周的线的数目。 在没有数字的地方，划线的数目没有任何限制，而0的四周则不能有任何划线。路线不能交叉，也不能有分岔。 Run Run.java samples 点击finish 检测是否完成游戏 finished ：完成游戏 wrong number ：数字周围边数错误 dangling end: 未完成回路 branching line ：回路有分岔 disconnected line： 有未连接的线 项目地址：https://github.com/Dennis174698/slitherlink]]></description>
								<content:encoded><![CDATA[
<h1>slitherlink</h1>



<p><a href="https://en.wikipedia.org/wiki/Slitherlink">slitherlink game</a>:</p>



<p>数回：游戏由0,1,2,3四个数字组成。每一个数字，代表四周划线的数目，并在最后成为一个不间断<br> 、不分岔的回路。<br> 把点与点以直线和横线相连，使之成为一个回路，且只能有一个回路。四点之间的数字代表在其四周的线的数目。<br> 在没有数字的地方，划线的数目没有任何限制，而0的四周则不能有任何划线。路线不能交叉，也不能有分岔。</p>



<p><br></p>



<h2>Run</h2>



<p>Run.java</p>



<h2>samples</h2>



<figure class="wp-block-image"><img src="https://github.com/Dennis174698/slitherlink/raw/master/1.PNG" alt=""/></figure>



<p>点击finish 检测是否完成游戏</p>



<p>finished ：完成游戏   wrong number ：数字周围边数错误 dangling end: 未完成回路 branching line ：回路有分岔 disconnected line： 有未连接的线</p>



<p>项目地址：https://github.com/Dennis174698/slitherlink</p>
]]></content:encoded>
							<wfw:commentRss>./../2019/05/15/slitherlink-puzzle-game/feed/index.html</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>蚁群算法在旅行商问题的应用</title>
		<link>./../2018/10/20/applying-ant-colony-optimisation-to-the-travelling-salesman-problem/index.html</link>
				<comments>./../2018/10/20/applying-ant-colony-optimisation-to-the-travelling-salesman-problem/index.html#respond</comments>
				<pubDate>Sat, 20 Oct 2018 10:48:08 +0000</pubDate>
		<dc:creator><![CDATA[dennis]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">./../../index.html?p=47</guid>
				<description><![CDATA[Applying Ant Colony Optimisation to the Travelling Salesman Problem problem description 旅行推销员问题：如果旅行推销员希望精确访问一次m个城市列表中的每个城市（其中，从城市i到城市j的旅行成本为cij），然后返回到本国城市，可能的最短路径是多少。 Algorithm Ant Colony Optimization ACO算法基于蚂蚁的行为，尝试寻找两点之间的最佳路径。 这是通过发送大量蚂蚁波来遍历图形来实现的。第一波蚂蚁随机地或基于一种简单的启发式方法（例如从任何节点走最短路径）遍历该图。 然后，信息素会沿着成功的路径分布，那些通过评分函数确定为相对较好的路径将接收更多量的信息素。然后，将进一步的蚂蚁发送出去遍历图，同时考虑信息素的水平和启发式，然后再次将信息素放置在与路径得分成比例的路径上。 这样，最优化的路径将累积最多量的信息素，并且更有可能被后代的蚂蚁选择。 Implementation 迭代阶段涉及迭代一定数量的世代，并在每次迭代中执行以下操作： 为每个蚂蚁生成一条路线。该路线由以下步骤生成： a. 随机选择一个起点 b. 根据信息素图和启发式因素的组合选择下一个要访问的位置。具体来说，使用以下公式为每个未访问的位置评分： 𝑠𝑐𝑜𝑟𝑒 = 𝑝ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒𝛼**α ∗ ℎ𝑒𝑢𝑟𝑖𝑠𝑡𝑖𝑐**β 同时: 𝑝ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒 = 从当前位置到未访问位置的路径上的信息素数量。 α = 信息素权重影响的比例因子。 ℎ𝑒𝑢𝑟𝑖𝑠𝑡𝑖𝑐 = 从当前位置到未访问位置的启发式值（在此解决方案中为1 /距离）。 β = 启发值权重影响的比例因子. c. 将下一个位置添加到路线并将其从未访问位置列表中删除。 根据行进的总距离对路线进行评分。 (cost= fun.decodingFun(RouteData,popsize,dmat,N)) 当找到更好的路线，将bestsolution更新 将分数标准化到 [100, 200]。 &#8230; <p class="link-more"><a href="./../2018/10/20/applying-ant-colony-optimisation-to-the-travelling-salesman-problem/index.html" class="more-link">Continue reading<span class="screen-reader-text"> "蚁群算法在旅行商问题的应用"</span></a></p>]]></description>
								<content:encoded><![CDATA[
<h1>Applying Ant Colony Optimisation to the Travelling Salesman Problem</h1>



<h2>problem description</h2>



<p>旅行推销员问题：如果旅行推销员希望精确访问一次m个城市列表中的每个城市（其中，从城市i到城市j的旅行成本为cij），然后返回到本国城市，可能的最短路径是多少。</p>



<h2>Algorithm</h2>



<figure class="wp-block-image"><img src="https://github.com/Dennis174698/TSP/raw/master/aco.png" alt=""/></figure>



<p style="font-size:27px">Ant Colony Optimization</p>



<p>ACO算法基于蚂蚁的行为，尝试寻找两点之间的最佳路径。</p>



<p>这是通过发送大量蚂蚁波来遍历图形来实现的。第一波蚂蚁随机地或基于一种简单的启发式方法（例如从任何节点走最短路径）遍历该图。</p>



<p>然后，信息素会沿着成功的路径分布，那些通过评分函数确定为相对较好的路径将接收更多量的信息素。然后，将进一步的蚂蚁发送出去遍历图，同时考虑信息素的水平和启发式，然后再次将信息素放置在与路径得分成比例的路径上。</p>



<p>这样，最优化的路径将累积最多量的信息素，并且更有可能被后代的蚂蚁选择。</p>



<p><br></p>



<h2>Implementation</h2>



<figure class="wp-block-image"><img src="https://github.com/Dennis174698/TSP/raw/master/workflow1.png" alt=""/></figure>



<p> <br>   迭代阶段涉及迭代一定数量的世代，并在每次迭代中执行以下操作： <br></p>



<ol><li>为每个蚂蚁生成一条路线。该路线由以下步骤生成：<br><br> <strong>a. </strong>随机选择一个起点<br><br> <strong>b. </strong>根据信息素图和启发式因素的组合选择下一个要访问的位置。具体来说，使用以下公式为每个未访问的位置评分： <br> <code>𝑠𝑐𝑜𝑟𝑒 = 𝑝ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒𝛼**α ∗ ℎ𝑒𝑢𝑟𝑖𝑠𝑡𝑖𝑐**β</code> 同时:  <code>𝑝ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒</code> = 从当前位置到未访问位置的路径上的信息素数量。<br><br> <code>α</code> = 信息素权重影响的比例因子。 <br><br> <code>ℎ𝑒𝑢𝑟𝑖𝑠𝑡𝑖𝑐</code> = 从当前位置到未访问位置的启发式值（在此解决方案中为1 /距离）。<br><br> <code>β</code> = 启发值权重影响的比例因子.<br><br> c. 将下一个位置添加到路线并将其从未访问位置列表中删除。<br></li><li>根据行进的总距离对路线进行评分。       <code>(cost= fun.decodingFun(RouteData,popsize,dmat,N))</code><br></li><li>当找到更好的路线，将bestsolution更新<br></li><li>将分数标准化到 [100, 200]。<br></li><li>生成信息素图，以沿着蚂蚁的路线分布。该值由路径上每条路径的信息素<code>𝑞 / 𝑠𝑐𝑎𝑙𝑒𝑑 𝑠𝑐𝑜𝑟𝑒</code>决定，其中q是某个比例因子<br></li><li>衰减现有信息素并使用以下公式添加所需的新信息素：<br><code>𝑝ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒 = 𝑐𝑢𝑟𝑟𝑒𝑛𝑡𝑃ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒 ∗ (1 − ⍴) + 𝑛𝑒𝑤𝑃ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒(Tau=Tau*(1-rho)+detaTau)</code><br><code>𝑝ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒</code> = 更新后的信息素值<br><code>𝑐𝑢𝑟𝑟𝑒𝑛𝑡𝑃ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒</code> = 在这条路线上现有的信息素值<br><code>⍴ </code>=信息素衰减因子.<br><code>𝑛𝑒𝑤𝑃ℎ𝑒𝑟𝑜𝑚𝑜𝑛𝑒</code> = 根据路线分数添加的信息素.<br></li></ol>



<p>所有迭代完成后， 将会得到：</p>



<ol><li>最优路线</li><li>每次迭代的最优分数</li><li>在每次迭代中所有路线分数的总和</li></ol>



<p style="font-size:29px">Sample Result:</p>



<p>预设值</p>



<p>MaxGen=100 #Iteration<br> popsize=20 #population of ants<br> alpha=4    #α<br> beta=1     #β<br> rho=0.5    #ρ<br> Q=5        #q</p>



<ul class="wp-block-gallery columns-2 is-cropped"><li class="blocks-gallery-item"><figure><img src="./../../wp-content/uploads/2019/11/1.png" alt="" data-id="54" data-link="./../2018/10/20/%e8%9a%81%e7%be%a4%e7%ae%97%e6%b3%95%e5%9c%a8%e6%97%85%e8%a1%8c%e5%95%86%e9%97%ae%e9%a2%98%e7%9a%84%e5%ba%94%e7%94%a8/attachment/1/index.html" class="wp-image-54" srcset="./../../wp-content/uploads/2019/11/1.png 432w, ./../../wp-content/uploads/2019/11/1-300x200.png 300w" sizes="(max-width: 432px) 100vw, 432px" /></figure></li><li class="blocks-gallery-item"><figure><img src="./../../wp-content/uploads/2019/11/2.png" alt="" data-id="55" data-link="./../2018/10/20/%e8%9a%81%e7%be%a4%e7%ae%97%e6%b3%95%e5%9c%a8%e6%97%85%e8%a1%8c%e5%95%86%e9%97%ae%e9%a2%98%e7%9a%84%e5%ba%94%e7%94%a8/attachment/2/index.html" class="wp-image-55" srcset="./../../wp-content/uploads/2019/11/2.png 432w, ./../../wp-content/uploads/2019/11/2-300x200.png 300w" sizes="(max-width: 432px) 100vw, 432px" /></figure></li></ul>



<p>项目地址：<a href="https://github.com/Dennis174698/TSP">https://github.com/Dennis174698/TSP</a></p>
]]></content:encoded>
							<wfw:commentRss>./../2018/10/20/applying-ant-colony-optimisation-to-the-travelling-salesman-problem/feed/index.html</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
	</channel>
</rss>
